cur_tile = [int(self.rect.x / game.tile_size), int(self.rect.y / game.tile_size)]
cur_pos = list(self.rect.topleft)
cur_tile_pos = (cur_tile[0] * game.tile_size, cur_tile[1] * game.tile_size)
first_dx = (game.tile_size -(cur_pos[0] - cur_tile_pos[0]))
first_dy = (game.tile_size -(cur_pos[1] - cur_tile_pos[1]))
first_dx_mult = first_dx / game.tile_size
first_dy_mult = first_dy / game.tile_size
#
x_length_pos = list(self.rect.topleft)
y_length_pos = list(self.rect.topleft)
xs = []
ys = []
#
x_first = True
y_first = True
#
x_length += sqrt(first_dx_mult ** 2 + (dy / dx * first_dx_mult) ** 2)
y_length += sqrt(first_dy_mult ** 2 + (dx / dy * first_dy_mult) ** 2)
#
for i in range(30):
    if x_length <= y_length:
        cur_tile[0] += 1
        if x_first:
            x_length_pos[0] += game.tile_size * first_dx_mult
            x_length_pos[1] += game.tile_size * first_dx_mult * (dy / dx)
            x_first = False
        else:
            x_length_pos[0] += game.tile_size
            x_length_pos[1] += game.tile_size * (dy / dx)
        x_length += sqrt(1 + (dy / dx) ** 2)
        xs.append(x_length_pos[:])
        if game.map[cur_tile[1]][cur_tile[0]] != 0:
            final_pos = x_length_pos
            break
    else:
        cur_tile[1] += 1
        if y_first:
            y_length_pos[1] += game.tile_size * first_dy_mult
            y_length_pos[0] += game.tile_size * first_dy_mult * (dx / dy)
            y_first = False
        else:
            y_length_pos[1] += game.tile_size
            y_length_pos[0] += game.tile_size * (dx / dy)
        y_length += sqrt(1 + (dx / dy) ** 2)
        ys.append(y_length_pos[:])
        if game.map[cur_tile[1]][cur_tile[0]] != 0:
            final_pos = y_length_pos
            break
p1 = self.rect.topleft
p2 = final_pos
for check in xs:
    draw_rect(display.renderer, YELLOW, (check[0] - self.w / 2, check[1] - self.h / 2, self.w, self.h))
for check in ys:
    draw_rect(display.renderer, ORANGE, (check[0] - self.w / 2, check[1] - self.h / 2, self.w, self.h))
draw_line(display.renderer, GREEN, p1, p2)
